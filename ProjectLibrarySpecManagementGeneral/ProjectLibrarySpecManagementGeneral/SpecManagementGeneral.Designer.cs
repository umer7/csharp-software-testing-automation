// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace ProjectLibrarySpecManagementGeneral.SpecManagementGeneralClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class SpecManagementGeneral
    {
        
        #region Properties
        public SpecManagementWindow SpecManagementWindow
        {
            get
            {
                if ((this.mSpecManagementWindow == null))
                {
                    this.mSpecManagementWindow = new SpecManagementWindow();
                }
                return this.mSpecManagementWindow;
            }
        }
        
        public ImportObjectWindow ImportObjectWindow
        {
            get
            {
                if ((this.mImportObjectWindow == null))
                {
                    this.mImportObjectWindow = new ImportObjectWindow();
                }
                return this.mImportObjectWindow;
            }
        }
        #endregion
        
        #region Fields
        private SpecManagementWindow mSpecManagementWindow;
        
        private ImportObjectWindow mImportObjectWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SpecManagementWindow : BrowserWindow
    {
        
        public SpecManagementWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public SpecManagementDocument SpecManagementDocument
        {
            get
            {
                if ((this.mSpecManagementDocument == null))
                {
                    this.mSpecManagementDocument = new SpecManagementDocument(this);
                }
                return this.mSpecManagementDocument;
            }
        }
        #endregion
        
        #region Fields
        private SpecManagementDocument mSpecManagementDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SpecManagementDocument : HtmlDocument
    {
        
        public SpecManagementDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Hoops/Apps/especwebapplication/especdefault.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "/Hoops/Apps/especwebapplication/especdefault.aspx";
            #endregion
        }
        
        #region Properties
        public MasterPane MasterPane
        {
            get
            {
                if ((this.mMasterPane == null))
                {
                    this.mMasterPane = new MasterPane(this);
                }
                return this.mMasterPane;
            }
        }
        
        public UIDiv_ComplexFilterPane UIDiv_ComplexFilterPane
        {
            get
            {
                if ((this.mUIDiv_ComplexFilterPane == null))
                {
                    this.mUIDiv_ComplexFilterPane = new UIDiv_ComplexFilterPane(this);
                }
                return this.mUIDiv_ComplexFilterPane;
            }
        }
        
        public UIDiv_filterWindowBodyPane UIDiv_filterWindowBodyPane
        {
            get
            {
                if ((this.mUIDiv_filterWindowBodyPane == null))
                {
                    this.mUIDiv_filterWindowBodyPane = new UIDiv_filterWindowBodyPane(this);
                }
                return this.mUIDiv_filterWindowBodyPane;
            }
        }
        
        public HtmlCheckBox ExactMatchCheckBox
        {
            get
            {
                if ((this.mExactMatchCheckBox == null))
                {
                    this.mExactMatchCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mExactMatchCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "cbxExactMatch";
                    this.mExactMatchCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = null;
                    this.mExactMatchCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mExactMatchCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mExactMatchCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mExactMatchCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mExactMatchCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=cbxExactMatch type=checkbox value=\"\"";
                    this.mExactMatchCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "25";
                    #endregion
                }
                return this.mExactMatchCheckBox;
            }
        }
        
        public HtmlCheckBox LatestVersionCheckBox
        {
            get
            {
                if ((this.mLatestVersionCheckBox == null))
                {
                    this.mLatestVersionCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mLatestVersionCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "cbxLatestVersion";
                    this.mLatestVersionCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = null;
                    this.mLatestVersionCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mLatestVersionCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mLatestVersionCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mLatestVersionCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mLatestVersionCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=cbxLatestVersion style=\"VISIBILITY: v";
                    this.mLatestVersionCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "24";
                    #endregion
                }
                return this.mLatestVersionCheckBox;
            }
        }
        
        public HtmlCheckBox CaseCheckBox
        {
            get
            {
                if ((this.mCaseCheckBox == null))
                {
                    this.mCaseCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mCaseCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "cbxCase";
                    this.mCaseCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = null;
                    this.mCaseCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mCaseCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mCaseCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mCaseCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mCaseCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=cbxCase type=checkbox value=\"\"";
                    this.mCaseCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "26";
                    #endregion
                }
                return this.mCaseCheckBox;
            }
        }
        
        public UIDiv_detail_bodyPane UIDiv_detail_bodyPane
        {
            get
            {
                if ((this.mUIDiv_detail_bodyPane == null))
                {
                    this.mUIDiv_detail_bodyPane = new UIDiv_detail_bodyPane(this);
                }
                return this.mUIDiv_detail_bodyPane;
            }
        }
        
        public UIDiv_gridContextMenuPane UIDiv_gridContextMenuPane
        {
            get
            {
                if ((this.mUIDiv_gridContextMenuPane == null))
                {
                    this.mUIDiv_gridContextMenuPane = new UIDiv_gridContextMenuPane(this);
                }
                return this.mUIDiv_gridContextMenuPane;
            }
        }
        #endregion
        
        #region Fields
        private MasterPane mMasterPane;
        
        private UIDiv_ComplexFilterPane mUIDiv_ComplexFilterPane;
        
        private UIDiv_filterWindowBodyPane mUIDiv_filterWindowBodyPane;
        
        private HtmlCheckBox mExactMatchCheckBox;
        
        private HtmlCheckBox mLatestVersionCheckBox;
        
        private HtmlCheckBox mCaseCheckBox;
        
        private UIDiv_detail_bodyPane mUIDiv_detail_bodyPane;
        
        private UIDiv_gridContextMenuPane mUIDiv_gridContextMenuPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class MasterPane : HtmlDiv
    {
        
        public MasterPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "tvTree_1";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Master";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = @"id=tvTree_1 igTag=""<NodeTagObject><User>a1</User><Domain>domain</Domain><Base>.../hoops-services</Base><Dll>POMS_Group_Lib</Dll><SubType>CO_GROUP_MEMBER</SubType><Type>LevelFolder</Type><Level>10</Level><Location></Location><Folder></Folder></NodeTagObject>""  igUnselImage=""../HOOPS/Apps/especwebapplication/Bitmaps/ClsdFold.ico""";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "30";
            #endregion
        }
        
        #region Properties
        public HtmlImage ExpandCollaspeImg
        {
            get
            {
                if ((this.mExpandCollaspeImg == null))
                {
                    this.mExpandCollaspeImg = new HtmlImage(this);
                    #region Search Criteria
                    this.mExpandCollaspeImg.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mExpandCollaspeImg.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mExpandCollaspeImg.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mExpandCollaspeImg.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/HOOPS/WebResource.axd";
                    this.mExpandCollaspeImg.FilterProperties[HtmlImage.PropertyNames.Src] = "/HOOPS/WebResource.axd?d=S1IRl1jl3_h1Jhq3AFtjp7wWp7Za1_TtcyS2V-90uJZBVO8cAQKh_5R8" +
                        "yNBHCW0R4hDZbY8wHHU5zwoYrrM8HhvsA5M1pba4rqsy_kTYSHlaSN2r8nL3nN03IciYGIFPPMWR3Cuc" +
                        "VIF_fkGGqPJAfVDRr5yoK5ccA7mbImhM8--LXJuINgbtVNGXdgSV__-SQlohuw2&t=63525377130000" +
                        "0000";
                    this.mExpandCollaspeImg.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mExpandCollaspeImg.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mExpandCollaspeImg;
            }
        }
        
        public HtmlSpan UIMasterPane
        {
            get
            {
                if ((this.mUIMasterPane == null))
                {
                    this.mUIMasterPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIMasterPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIMasterPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIMasterPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Master";
                    this.mUIMasterPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIMasterPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "tvTreeNode nodeCSS tvTreeSel selectedNodeCSS";
                    this.mUIMasterPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "tabIndex=1000 class=\"tvTreeNode nodeCSS tvTreeSel selectedNodeCSS\" hideFocus igtx" +
                        "t=\"1\" HovClass=\"tvTreeNode nodeCSS\" hoverSet=\"null\"  igtInitClass=\"tvTreeNode no" +
                        "deCSS\"";
                    this.mUIMasterPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "8";
                    #endregion
                }
                return this.mUIMasterPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mExpandCollaspeImg;
        
        private HtmlSpan mUIMasterPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDiv_ComplexFilterPane : HtmlDiv
    {
        
        public UIDiv_ComplexFilterPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "div_ComplexFilter";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "FilterID:(All)1_RawMatlSampleOP12345OP12";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "filterWindow";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=div_ComplexFilter class=filterWindow style=\"POSITION: absolute; LEFT: 300px; T" +
                "OP: 150px\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "160";
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties["TagName"] = "FIELDSET";
                    this.mUIItemCustom.SearchProperties["Id"] = null;
                    this.mUIItemCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIItemCustom.FilterProperties["Class"] = null;
                    this.mUIItemCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIItemCustom.FilterProperties["TagInstance"] = "1";
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        
        public HtmlInputButton ApplyButton
        {
            get
            {
                if ((this.mApplyButton == null))
                {
                    this.mApplyButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mApplyButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mApplyButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mApplyButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Apply";
                    this.mApplyButton.SearchProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mApplyButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mApplyButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mApplyButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "onclick=applyComplexFilter() type=button";
                    this.mApplyButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "13";
                    #endregion
                }
                return this.mApplyButton;
            }
        }
        
        public HtmlInputButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mCloseButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mCloseButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Close";
                    this.mCloseButton.SearchProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mCloseButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mCloseButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mCloseButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "onclick=\"div_ComplexFilter.style.display";
                    this.mCloseButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "14";
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIItemCustom;
        
        private HtmlInputButton mApplyButton;
        
        private HtmlInputButton mCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDiv_filterWindowBodyPane : HtmlDiv
    {
        
        public UIDiv_filterWindowBodyPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "div_filterWindowBody";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "ID:(All)1234515145_BOP15145_BOP217297_BO";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "onkeypress=\"if(event.keyCode == 13){applyComplexFilter();}\" id=div_filterWindowBo" +
                "dy";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "161";
            #endregion
        }
        
        #region Properties
        public HtmlEdit ID
        {
            get
            {
                if ((this.mID == null))
                {
                    this.mID = new HtmlEdit(this);
                    #region Search Criteria
                    this.mID.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mID.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mID.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mID.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mID.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mID.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mID.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 175px\" value=sda";
                    this.mID.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mID;
            }
        }
        
        public HtmlEdit Version
        {
            get
            {
                if ((this.mVersion == null))
                {
                    this.mVersion = new HtmlEdit(this);
                    #region Search Criteria
                    this.mVersion.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mVersion.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mVersion.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mVersion.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mVersion.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mVersion.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mVersion.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 175px\"";
                    this.mVersion.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    #endregion
                }
                return this.mVersion;
            }
        }
        
        public HtmlEdit Description
        {
            get
            {
                if ((this.mDescription == null))
                {
                    this.mDescription = new HtmlEdit(this);
                    #region Search Criteria
                    this.mDescription.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mDescription.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mDescription.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mDescription.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mDescription.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mDescription.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mDescription.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 175px\"";
                    this.mDescription.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    #endregion
                }
                return this.mDescription;
            }
        }
        
        public HtmlEdit CheckOutBy
        {
            get
            {
                if ((this.mCheckOutBy == null))
                {
                    this.mCheckOutBy = new HtmlEdit(this);
                    #region Search Criteria
                    this.mCheckOutBy.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mCheckOutBy.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mCheckOutBy.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mCheckOutBy.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mCheckOutBy.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mCheckOutBy.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mCheckOutBy.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 175px\"";
                    this.mCheckOutBy.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    #endregion
                }
                return this.mCheckOutBy;
            }
        }
        
        public HtmlEdit Status
        {
            get
            {
                if ((this.mStatus == null))
                {
                    this.mStatus = new HtmlEdit(this);
                    #region Search Criteria
                    this.mStatus.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mStatus.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mStatus.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mStatus.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mStatus.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mStatus.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mStatus.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 175px\"";
                    this.mStatus.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    #endregion
                }
                return this.mStatus;
            }
        }
        
        public HtmlEdit LastChangeBy
        {
            get
            {
                if ((this.mLastChangeBy == null))
                {
                    this.mLastChangeBy = new HtmlEdit(this);
                    #region Search Criteria
                    this.mLastChangeBy.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mLastChangeBy.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mLastChangeBy.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mLastChangeBy.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mLastChangeBy.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mLastChangeBy.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mLastChangeBy.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 175px\"";
                    this.mLastChangeBy.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    #endregion
                }
                return this.mLastChangeBy;
            }
        }
        
        public HtmlEdit LastChangeDate
        {
            get
            {
                if ((this.mLastChangeDate == null))
                {
                    this.mLastChangeDate = new HtmlEdit(this);
                    #region Search Criteria
                    this.mLastChangeDate.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mLastChangeDate.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mLastChangeDate.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mLastChangeDate.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mLastChangeDate.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mLastChangeDate.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mLastChangeDate.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 175px\"";
                    this.mLastChangeDate.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "7";
                    #endregion
                }
                return this.mLastChangeDate;
            }
        }
        
        public HtmlEdit EffectiveDate
        {
            get
            {
                if ((this.mEffectiveDate == null))
                {
                    this.mEffectiveDate = new HtmlEdit(this);
                    #region Search Criteria
                    this.mEffectiveDate.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mEffectiveDate.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mEffectiveDate.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mEffectiveDate.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mEffectiveDate.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mEffectiveDate.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mEffectiveDate.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 175px\"";
                    this.mEffectiveDate.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "8";
                    #endregion
                }
                return this.mEffectiveDate;
            }
        }
        
        public HtmlEdit ExpireDate
        {
            get
            {
                if ((this.mExpireDate == null))
                {
                    this.mExpireDate = new HtmlEdit(this);
                    #region Search Criteria
                    this.mExpireDate.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mExpireDate.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mExpireDate.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mExpireDate.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mExpireDate.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mExpireDate.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mExpireDate.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 175px\"";
                    this.mExpireDate.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "9";
                    #endregion
                }
                return this.mExpireDate;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mID;
        
        private HtmlEdit mVersion;
        
        private HtmlEdit mDescription;
        
        private HtmlEdit mCheckOutBy;
        
        private HtmlEdit mStatus;
        
        private HtmlEdit mLastChangeBy;
        
        private HtmlEdit mLastChangeDate;
        
        private HtmlEdit mEffectiveDate;
        
        private HtmlEdit mExpireDate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDiv_detail_bodyPane : HtmlDiv
    {
        
        public UIDiv_detail_bodyPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "div_detail_body";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "IDVersionDescriptionChecked Out ByStatus";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "onscroll=__setHeaderScroll(this) onresize=__setHeaderScroll(this) id=div_detail_b" +
                "ody style=\"OVERFLOW: auto; BORDER-TOP: gray 0px solid; HEIGHT: 352px; BORDER-RIG" +
                "HT: gray 0px solid; BORDER-BOTTOM: gray 0px solid; BORDER-LEFT: gray 0px solid; " +
                "WIDTH: 1322px\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "153";
            #endregion
        }
        
        #region Properties
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTable mUIItemTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemTable : HtmlTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "IDVersionDescriptionChecked Out ByStatus";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=especData cellSpacing=0 cellPadding=0 width=\"100%\" xmlns:msxsl=\"urn:schemas" +
                "-microsoft-com:xslt\" xmlns:fn=\"http://www.w3.org/2005/02/xpath-functions\" xmlns:" +
                "xs=\"http://www.w3.org/2001/XMLSchema-instance\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "3";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "9";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "especData";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "20";
            #endregion
        }
        
        #region Properties
        public HtmlCell ItemCell
        {
            get
            {
                if ((this.mItemCell == null))
                {
                    this.mItemCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mItemCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mItemCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mItemCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mItemCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "12q";
                    this.mItemCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "noWrap";
                    this.mItemCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "2";
                    this.mItemCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "0";
                    this.mItemCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mItemCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "66";
                    #endregion
                }
                return this.mItemCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mItemCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDiv_gridContextMenuPane : HtmlDiv
    {
        
        public UIDiv_gridContextMenuPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "div_gridContextMenu";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "\r\n                        Open...\r\n                        New...\r\n              " +
                "          Copy\r\n                        Paste\r\n                        Find\r\n   " +
                "                     Wher\r\n                      ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=div_gridContextMenu style=\"POSITION: absolute; LEFT: 299px; TOP: 48px\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "157";
            #endregion
        }
        
        #region Properties
        public UIItemTable1 UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable1(this);
                }
                return this.mUIItemTable;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTable1 mUIItemTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemTable1 : HtmlTable
    {
        
        public UIItemTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "\r\n                            Open...\r\n                            New...\r\n      " +
                "                      Copy\r\n                            Paste\r\n                 " +
                "           Find\r\n                            Wher\r\n                          ";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=eSpecContextMenu cellSpacing=0 cellPadding=0";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "23";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "1";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "eSpecContextMenu";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "25";
            #endregion
        }
        
        #region Properties
        public HtmlCell UIContextMenuActionCell
        {
            get
            {
                if ((this.mUIContextMenuActionCell == null))
                {
                    this.mUIContextMenuActionCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIContextMenuActionCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIContextMenuActionCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "onclick=\"fnSignoffOp(1,\'VERIFY\',\'Verify\')\" onmouseenter=\"this.className = \'hover\'" +
                        "\" onmouseout=\"this.className=\'\'\"  cob=\"a1\" status=\"Editing\" objver=\"1.001\" objid" +
                        "=\"00001\"";
                    this.mUIContextMenuActionCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "7";
                    this.mUIContextMenuActionCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "0";
                    this.mUIContextMenuActionCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIContextMenuActionCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "649";
                    #endregion
                }
                return this.mUIContextMenuActionCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIContextMenuActionCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class ImportObjectWindow : BrowserWindow
    {
        
        public ImportObjectWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Import Object";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Import Object");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public ImportObjectDocument ImportObjectDocument
        {
            get
            {
                if ((this.mImportObjectDocument == null))
                {
                    this.mImportObjectDocument = new ImportObjectDocument(this);
                }
                return this.mImportObjectDocument;
            }
        }
        #endregion
        
        #region Fields
        private ImportObjectDocument mImportObjectDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class ImportObjectDocument : HtmlDocument
    {
        
        public ImportObjectDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Import Object";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Hoops/Apps/especwebapplication/eSpecImportOp.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = null;
            this.WindowTitles.Add("Import Object");
            #endregion
        }
        
        #region Properties
        public HtmlFileInput BrowseFile
        {
            get
            {
                if ((this.mBrowseFile == null))
                {
                    this.mBrowseFile = new HtmlFileInput(this);
                    #region Search Criteria
                    this.mBrowseFile.SearchProperties[HtmlFileInput.PropertyNames.Id] = "fnImportFile";
                    this.mBrowseFile.SearchProperties[HtmlFileInput.PropertyNames.Name] = "fnImportFile";
                    this.mBrowseFile.FilterProperties[HtmlFileInput.PropertyNames.LabeledBy] = null;
                    this.mBrowseFile.FilterProperties[HtmlFileInput.PropertyNames.Title] = null;
                    this.mBrowseFile.FilterProperties[HtmlFileInput.PropertyNames.Class] = "required";
                    this.mBrowseFile.FilterProperties[HtmlFileInput.PropertyNames.ControlDefinition] = "id=fnImportFile class=required size=80 t";
                    this.mBrowseFile.FilterProperties[HtmlFileInput.PropertyNames.TagInstance] = "2";
                    this.mBrowseFile.WindowTitles.Add("Import Object");
                    #endregion
                }
                return this.mBrowseFile;
            }
        }
        
        public HtmlCheckBox ValidateOnlyXMLCheckBox
        {
            get
            {
                if ((this.mValidateOnlyXMLCheckBox == null))
                {
                    this.mValidateOnlyXMLCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mValidateOnlyXMLCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "ValidateFlag";
                    this.mValidateOnlyXMLCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "ValidateFlag";
                    this.mValidateOnlyXMLCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "off";
                    this.mValidateOnlyXMLCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mValidateOnlyXMLCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = "Validate only if set, otherwise perform database updates";
                    this.mValidateOnlyXMLCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mValidateOnlyXMLCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=ValidateFlag title=\"Validate only if ";
                    this.mValidateOnlyXMLCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "3";
                    this.mValidateOnlyXMLCheckBox.WindowTitles.Add("Import Object");
                    #endregion
                }
                return this.mValidateOnlyXMLCheckBox;
            }
        }
        
        public HtmlCheckBox StopOnErrorCheckBox
        {
            get
            {
                if ((this.mStopOnErrorCheckBox == null))
                {
                    this.mStopOnErrorCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mStopOnErrorCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "ErrorsFlag";
                    this.mStopOnErrorCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "ErrorsFlag";
                    this.mStopOnErrorCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "off";
                    this.mStopOnErrorCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mStopOnErrorCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = "Stop on any error if set, otherwise report all errors";
                    this.mStopOnErrorCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mStopOnErrorCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=ErrorsFlag title=\"Stop on any error i";
                    this.mStopOnErrorCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "4";
                    this.mStopOnErrorCheckBox.WindowTitles.Add("Import Object");
                    #endregion
                }
                return this.mStopOnErrorCheckBox;
            }
        }
        
        public HtmlCheckBox PreserveCheckinCheckBox
        {
            get
            {
                if ((this.mPreserveCheckinCheckBox == null))
                {
                    this.mPreserveCheckinCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mPreserveCheckinCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "CheckoutFlag";
                    this.mPreserveCheckinCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "CheckoutFlag";
                    this.mPreserveCheckinCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mPreserveCheckinCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mPreserveCheckinCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = "Preserve checkin/checkout status if set, otherwise check out to current user";
                    this.mPreserveCheckinCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mPreserveCheckinCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=CheckoutFlag title=\"Preserve checkin/";
                    this.mPreserveCheckinCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "5";
                    this.mPreserveCheckinCheckBox.WindowTitles.Add("Import Object");
                    #endregion
                }
                return this.mPreserveCheckinCheckBox;
            }
        }
        
        public HtmlCheckBox PreserveVersionCheckBox
        {
            get
            {
                if ((this.mPreserveVersionCheckBox == null))
                {
                    this.mPreserveVersionCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mPreserveVersionCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "VersionFlag";
                    this.mPreserveVersionCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "VersionFlag";
                    this.mPreserveVersionCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mPreserveVersionCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mPreserveVersionCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = "Preserve version if set, otherwise assign new version";
                    this.mPreserveVersionCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mPreserveVersionCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=VersionFlag title=\"Preserve version i";
                    this.mPreserveVersionCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "6";
                    this.mPreserveVersionCheckBox.WindowTitles.Add("Import Object");
                    #endregion
                }
                return this.mPreserveVersionCheckBox;
            }
        }
        
        public HtmlCheckBox PreserveStatusCheckBox
        {
            get
            {
                if ((this.mPreserveStatusCheckBox == null))
                {
                    this.mPreserveStatusCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mPreserveStatusCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "StatusFlag";
                    this.mPreserveStatusCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "StatusFlag";
                    this.mPreserveStatusCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mPreserveStatusCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mPreserveStatusCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = "Preserve status if set, otherwise set to EDITING";
                    this.mPreserveStatusCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mPreserveStatusCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=StatusFlag title=\"Preserve status if ";
                    this.mPreserveStatusCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "7";
                    this.mPreserveStatusCheckBox.WindowTitles.Add("Import Object");
                    #endregion
                }
                return this.mPreserveStatusCheckBox;
            }
        }
        
        public HtmlInputButton ImportButton
        {
            get
            {
                if ((this.mImportButton == null))
                {
                    this.mImportButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mImportButton.SearchProperties[HtmlButton.PropertyNames.Id] = "btAccept";
                    this.mImportButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mImportButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Import";
                    this.mImportButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mImportButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mImportButton.FilterProperties[HtmlButton.PropertyNames.Class] = "ofc-button";
                    this.mImportButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=btAccept class=ofc-button style=\"BORD";
                    this.mImportButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "8";
                    this.mImportButton.WindowTitles.Add("Import Object");
                    #endregion
                }
                return this.mImportButton;
            }
        }
        
        public HtmlInputButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[HtmlButton.PropertyNames.Id] = "btCancel";
                    this.mCancelButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mCancelButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Cancel";
                    this.mCancelButton.SearchProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mCancelButton.FilterProperties[HtmlButton.PropertyNames.Title] = "";
                    this.mCancelButton.FilterProperties[HtmlButton.PropertyNames.Class] = "ofc-button";
                    this.mCancelButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=btCancel class=ofc-button style=\"BORD";
                    this.mCancelButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "9";
                    this.mCancelButton.WindowTitles.Add("Import Object");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlFileInput mBrowseFile;
        
        private HtmlCheckBox mValidateOnlyXMLCheckBox;
        
        private HtmlCheckBox mStopOnErrorCheckBox;
        
        private HtmlCheckBox mPreserveCheckinCheckBox;
        
        private HtmlCheckBox mPreserveVersionCheckBox;
        
        private HtmlCheckBox mPreserveStatusCheckBox;
        
        private HtmlInputButton mImportButton;
        
        private HtmlInputButton mCancelButton;
        #endregion
    }
}
